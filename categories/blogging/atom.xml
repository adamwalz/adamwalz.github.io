<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: blogging | Swarm Intelligence - Adam Walz's Blog and Portfolio]]></title>
  <link href="http://adamwalz.net/categories/blogging/atom.xml" rel="self"/>
  <link href="http://adamwalz.net/"/>
  <updated>2015-03-27T01:17:59-07:00</updated>
  <id>http://adamwalz.net/</id>
  <author>
    <name><![CDATA[Adam Walz]]></name>
    <email><![CDATA[adam@adamwalz.net]]></email>
  </author>
  <generator uri="http://jekyllrb.com/">Jekyll</generator>

  
  <entry>
    <title type="html"><![CDATA[Blogging with Jekyll and Linode Part 2: Git and Github]]></title>
    <link href="http://adamwalz.net/blog/2014/08/24/blogging-with-jekyll-and-linode-part-2-git/"/>
    <updated>2014-08-24T11:52:36-07:00</updated>
    <id>http://adamwalz.net/blog/2014/08/24/blogging-with-jekyll-and-linode-part-2-git</id>
    <content type="html"><![CDATA[<h1 id="part-2-git-and-github">Part 2: Git and Github</h1>

<p>Everyone has experience writing a paper, getting 10 pages in a having your word processor crash. That feeling of so much work lost and frantically attempting to get it back either by computational luck or sheer force of human memory.</p>

<p>Even when pressing save, have you gone down the wrong path in your writing (or coding), and just <em>know</em> that your previous version was better, if only the undo button would go that far.</p>

<p>This is where Git comes in. Git is a version control system that allows you to save snapshots of your work quickly, and revert to any save point you’ve ever created. It goes much further than a save button however, enabling you to snapshot portions of your latest work, collaborate with others who are simultaneously working on the project, remembering/explaining <em>why</em> the change was made, finding out who changed a particular line in the project, and backing up your project remotely.</p>

<p><img src="/assets/images/posts/blogging_with_jekyll/git/git_logo-350x146-ad2d97.png" class="img-responsive center-block" alt ”Git logo” ></p>

<h2 id="installing-git">Installing Git</h2>

<p>On OS X Mavericks, Git is not installed by default, but Apple makes it simple to install using the Xcode command line tools. Run any git command to see if you have it, I like to do this by checking the version number.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>git –version
git version 1.9.3 <span class="o">(</span>Apple Git-50<span class="o">)</span></code></pre></div></p>

<p>If you see any output from this command, then you’re all set; the particular version is not important for anything in this post. Otherwise, a window would have appeared asking to install the command line tools. Click install.<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> If all else fails see the official <a href="http://git-scm.com/book/en/Getting-Started-Installing-Git">Installing Git</a> page for more help.</p>

<h2 id="setting-up-git">Setting up Git</h2>

<p>Git is incredibly easy to add to any project; so easy in fact that I often add it to every folder I create, even if I don’t think I’ll be needing any source control. To add Git to your blog project, navigate to the <strong>root directory</strong> of your site, and type <code>git init</code></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>git init
Initialized empty Git repository <span class="k">in</span> ~/Developer/blog/.git/</code></pre></div></p>

<p>That’s it. You can verify that this was done correctly by using the <code>status</code> command.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>git status
On branch master&lt;/p&gt;

&lt;p&gt;Initial commit&lt;/p&gt;

&lt;p&gt;nothing to commit</code></pre></div></p>

<h2 id="working-with-git">Working with Git</h2>

<p>Here is where things may start to get interesting. When you first initialize git at the root of your project directory, the files in the directory are not automatically saved. The initialization command creates what is known as a <em>repository</em> and files that are <strong>committed</strong> to the repository are saved. At this point you haven’t yet added any files to the repository.</p>

<p>The following image shows the life cycle of files in git terminology. The arrows show how the commands <code>git add</code> and <code>git commit</code> affect the tracking state of a file.</p>

<p><img src="/assets/images/posts/blogging_with_jekyll/git/git_lifecycle-350x292-a1eef5.png" class="img-responsive center-block" alt ”Git lifecycle” ></p>

<ul>
  <li><strong>Untracked</strong> files are those that have been created on your local computer, but git is not saving tracking the history of changes to those files.</li>
  <li><strong>Staging Area</strong> contains files that are about to be committed to git</li>
  <li><strong>Git Repository</strong> contains every committed change that you have made to your project</li>
  <li><strong>Working Directory</strong> contains the files that have been modified since the last commit</li>
</ul>

<p>This is more concretely shown with an example of git in action. After using <code>git init</code> to initialize a git repository in an empty directory on your computer, we’ll add some files.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">echo</span> “This is some text <span class="k">in </span>a file named foo.txt” &amp;gt; foo.txt
<span class="nb">echo</span> “This is some text <span class="k">in </span>a file named bar.txt” &amp;gt; bar.txt
mkdir folder1
mkdir folder2
<span class="nb">echo</span> “This is some text <span class="k">in </span>a file named folder1/baz.txt” &amp;gt; folder1/baz.txt</code></pre></div></p>

<p>At this point you have created a three files and two directories. The file baz.txt is inside the directory named <em>folder1</em> and the directory named <em>folder2</em> is empty. To see the state our files now, run <code>git status</code> again.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>git status
<span class="c"># On branch master</span>
<span class="c">#</span>
<span class="c"># Initial commit</span>
<span class="c">#</span>
<span class="c"># Untracked files:</span>
<span class="c">#   bar.txt</span>
<span class="c">#   folder1/</span>
<span class="c">#   foo.txt</span>
nothing added to commit but untracked files present</code></pre></div></p>

<p>This shows that <em>foo.txt</em>, <em>bar.txt</em>, and <em>folder1</em> are in the <strong>untracked</strong> state. You may be asking why <em>folder2</em> is not also untracked. Git only tracks file changes, so since <em>folder2</em> is empty, it cannot be tracked.</p>

<h3 id="staging-area">Staging Area</h3>
<p>As the git life cycle image shows, to move files from untracked to the staging area run <code>git add</code>. Lets do this for <em>foo.txt</em> and <em>folder1</em>.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>git add foo.txt folder1
<span class="gp">$ </span>git status
<span class="c"># On branch master</span>
<span class="c">#</span>
<span class="c"># Initial commit</span>
<span class="c">#</span>
<span class="c"># Changes to be committed:</span>
<span class="c">#   new file:   folder1/baz.txt</span>
<span class="c">#   new file:   foo.txt</span>
<span class="c">#</span>
<span class="c"># Untracked files:</span>
<span class="c">#   bar.txt</span></code></pre></div></p>

<p>This added <em>foo.txt</em> and every file in the directory <em>folder1</em> to the staging area as shown in the status output under “changes to be committed”. The file <em>bar.txt</em> was left untracked.</p>

<h3 id="committing">Committing</h3>
<p>Files in the staging area can now be committed to the git repository. Git commits are similar to pressing the ‘save’ button on a word processor, but include additional information about the author and the reason <em>why</em> the change is being committed. This is called the commit message, and every commit includes one. This message can be added on the command line with the <code>-m</code> flag followed by a quoted message.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>git commit -m “Add example on committing a file and a folder”
<span class="o">[</span>master <span class="o">(</span>root-commit<span class="o">)</span> b022d5f] Add example on committing a file and a folder
 2 files changed, 2 insertions<span class="o">(</span>+<span class="o">)</span>
 create mode 100644 folder1/baz.txt
 create mode 100644 foo.txt
<span class="gp">$ </span>git status
<span class="c"># On branch master</span>
<span class="c"># Untracked files:</span>
<span class="c">#   bar.txt</span>
nothing added to commit but untracked files present</code></pre></div></p>

<h3 id="modifying-files">Modifying files</h3>
<p>Additional changes may be needed in the files we committed to our git repository. Use any text editor the change a word in the file <em>foo.txt</em>. In this example I have chosen to change the word “some” to “new”.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>less foo.txt
This is new text <span class="k">in </span>a file named foo.txt
<span class="gp">$ </span>git status
<span class="c"># On branch master</span>
<span class="c"># Changes not staged for commit:</span>
<span class="c">#   modified:   foo.txt</span>
<span class="c">#</span>
<span class="c"># Untracked files:</span>
<span class="c">#   bar.txt</span>
no changes added to commit</code></pre></div></p>

<p>The modified file has been added to the <strong>working directory</strong> state and shows in <code>git status</code> as “modified:”. We have seen how to add a file to the staging area and then commit it to the git repository with a commit message. If we want to do all of these steps at the same time, the <code>-a</code> flag commits everything that is currently in the <strong>working directory</strong> or <strong>staging area</strong>.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>git commit -a -m “Change word <span class="k">in </span>foo”
<span class="o">[</span>master a5efbe7] Change word <span class="k">in </span>foo
 1 file changed, 1 insertion<span class="o">(</span>+<span class="o">)</span>, 1 deletion<span class="o">(</span>-<span class="o">)</span></code></pre></div></p>

<p>Notice in the output of this command where it says 1 insertion and 1 deletion. When a file is committed to git, only the <em>differences</em> are tracked. This commit contained a deletion of the word “some” and an insertion of the word “new”. If the file is very large this is an important distinction because it means commits are very light weight and do not require full copies of all the changed files.</p>

<h3 id="viewing-history">Viewing history</h3>
<p>Too see the changes your have made over time, the <code>git log</code> command will show you a list of all commits ever made to this repository.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>git log
commit a5efbe706e4e1334079320d8487e34ed040369de
Author: Adam Walz &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">"&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#100;&amp;#097;&amp;#109;&amp;#064;&amp;#097;&amp;#100;&amp;#097;&amp;#109;&amp;#119;&amp;#097;&amp;#108;&amp;#122;&amp;#046;&amp;#110;&amp;#101;&amp;#116;"</span>&gt;&amp;#097;&amp;#100;&amp;#097;&amp;#109;&amp;#064;&amp;#097;&amp;#100;&amp;#097;&amp;#109;&amp;#119;&amp;#097;&amp;#108;&amp;#122;&amp;#046;&amp;#110;&amp;#101;&amp;#116;&lt;/a&gt;
Date:   Sun Aug 24 01:28:15 2014 -0700&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Change word <span class="k">in </span>foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;commit b022d5f574f5c509b9e224754f5579b44fff54d2
Author: Adam Walz &lt;a <span class="nv">href</span><span class="o">=</span><span class="s2">"&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#097;&amp;#100;&amp;#097;&amp;#109;&amp;#064;&amp;#097;&amp;#100;&amp;#097;&amp;#109;&amp;#119;&amp;#097;&amp;#108;&amp;#122;&amp;#046;&amp;#110;&amp;#101;&amp;#116;"</span>&gt;&amp;#097;&amp;#100;&amp;#097;&amp;#109;&amp;#064;&amp;#097;&amp;#100;&amp;#097;&amp;#109;&amp;#119;&amp;#097;&amp;#108;&amp;#122;&amp;#046;&amp;#110;&amp;#101;&amp;#116;&lt;/a&gt;
Date:   Sun Aug 24 01:17:05 2014 -0700&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Add example on committing a file and a folder</code></pre></div>
</code></pre>

<h2 id="github">Github</h2>

<p>So far we have used the git source control system to track the history of project changes on your local computer. However, if you want to work with other people on the same project, or even by yourself on multiple computers, you’ll want to create a remote copy of your git repository to share. This is where the site <a href="http://github.com">github.com</a> comes in.</p>

<p>Github is web hosting service and interface for git repositories. It can store an entire copy of your project so you can share it with others, download it to multiple computers, view the history online, and rest easy knowing your project is backed up remotely.</p>

<h3 id="creating-a-new-repository">Creating a new repository</h3>
<p>Once you have set up a github account, click the <a href="github.com/new">+ New repository</a> link. Add a repository name and description, but leave the box for “Initialize this repository with a README” unchecked because we will be using our previous example which has already been initialized.</p>

<p><img src="/assets/images/posts/blogging_with_jekyll/git/github_new_repository-600x344-09b237.png" class="img-responsive center-block" alt ”Creating a new github repository” ></p>

<h3 id="pushing-to-github">Pushing to github</h3>
<p>Back in the terminal we need to add the address to our github repository as a <em>remote repository</em>. It is convention to name this remote <strong>origin</strong>. Change the example to use your own github username instead of <em>adamwalz</em> and the name of the repository you created on github instead of <em>myProject</em></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>git remote add origin git@github.com:adamwalz/myProject.git</code></pre></div></p>

<p>The terms <em>Pushing</em> and <em>Pulling</em> refer to uploading/downloading from a remote git repository. At this point our local repository contains commits that our remote repository does not have, so those need to be <em>pushed</em> to the remote. I will not be covering branches in this post, but the name <strong>master</strong> refers to the git branch in which you are using. If you have not created multiple branches, <strong>master</strong> is the default.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># push to the remote repository named origin on branch master</span>
<span class="gp">$ </span>git push origin master</code></pre></div></p>

<h2 id="getting-the-latest-changes">Getting the latest changes</h2>
<p>If you are working with a team, or from multiple computers, the commits on github may be more recent than the ones on your local computer. We need to synchronize with those changes.</p>

<p>When starting fresh on a new computer, we need to get the entire repository from github. This is called <em>cloning</em>. We will pretend you are starting fresh and clone to a new directory on your Desktop.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span><span class="nb">cd</span> ~/Desktop
<span class="gp">$ </span>git clone git@github.com:adamwalz/myProject.git myLocalProject
Cloning into ‘myLocalProject’…
remote: Counting objects: 8, <span class="k">done</span>.
remote: Compressing objects: 100% <span class="o">(</span>5/5<span class="o">)</span>, <span class="k">done</span>.
remote: Total 8 <span class="o">(</span>delta 0<span class="o">)</span>, reused 8 <span class="o">(</span>delta 0<span class="o">)</span>
Receiving objects: 100% <span class="o">(</span>8/8<span class="o">)</span>, <span class="k">done</span>.
Checking connectivity… <span class="k">done</span></code></pre></div></p>

<p>This created a new directory named <em>myLocalProject</em> that contains a copy of the entire git repository and knows about the remote repository on github. You can make changes in this working directory, and when they are ready you’ll need to <code>git add</code>, <code>git commit</code>, and <code>git push</code> to send the changes to github.</p>

<p>If there are recent changes on github that you want to download, running <code>git pull</code> will merge those changes into your own local repository.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span><span class="nb">cd</span> ~/Desktop/myLocalProject
<span class="gp">$ </span>git pull
Already up-to-date.</code></pre></div></p>

<h2 id="getting-help">Getting Help</h2>
<p>Github has an excellent set of answers to common issues about using git and github at <a href="https://help.github.com">help.github.com</a>. The <a href="http://git-scm.com">git website</a> also has in depth documentation and a really cool browser based git walk-through system for learning step by step. Even advanced users can pick something up through this site.</p>

<p>Finally, if any of the examples or discussion I have provided is not helpful, let me know in the comments.</p>

<h3 id="footnotes">Footnotes</h3>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>The dollar sign often signifies the command prompt in your terminal. I use it in that way to show what <em>you</em> should type. When there is no dollar sign before a line in the code block, don’t type it. That line signifies what the <em>output</em> of the previous command is. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>This will work on OS X 10.9 Mavericks, but may not on other versions of mac. It will definitely not work on any other platform, so see the <a href="http://git-scm.com/book/en/Getting-Started-Installing-Git">git website</a> for help. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blogging with Jekyll and Linode Part 1: Jekyll]]></title>
    <link href="http://adamwalz.net/blog/2014/04/26/blogging-with-jekyll-and-linode-part-1-jekyll/"/>
    <updated>2014-04-26T20:21:57-07:00</updated>
    <id>http://adamwalz.net/blog/2014/04/26/blogging-with-jekyll-and-linode-part-1-jekyll</id>
    <content type="html"><![CDATA[<h1 id="part-1-jekyll">Part 1: Jekyll</h1>
<p>This is the first post in a multi-part series on creating a new blog from scratch in Jekyll and hosting it yourself with Linode and nginx. In this series I will walk the reader through the creation of <em>this</em> blog from first typing <code>jekyll new</code> to its current state.</p>

<p>Jekyll was described by its creator Tom Preston-Werner, co-founder of Github, as “blogging like a hacker”. I received my degree is Computer Science and am currently working as a full-time developer, but I certainly don’t believe you need to have a theoretical CS background to use Jekyll. I will try my best to go through each step in my process with the most minimal assumptions possible.</p>

<p>Along the way we will touch on the tools of the trade such as git, ruby, nginx, the terminal, text editors, and networking. If I miss a key area along the way and you’d like me to write about it, please leave a comment.</p>

<p>tl;dr? Jump ahead to the <a href="#create-your-own">tutorial</a></p>

<h2 id="what-is-jekyll-and-when-not-to-use-it">What is Jekyll (and when not to use it)</h2>

<p><img src="/assets/images/posts/blogging_with_jekyll/jekyll/logo-350x162-f38998.png" class="img-responsive center-block" alt ”Jekyll logo” ></p>

<p>Jekyll is a static site generator that serves as a file-based content management system for websites (usually blogs, but not necessarily). This description has two main keywords: <strong>static</strong> and <strong>generator</strong>.</p>

<h4 id="static">static</h4>

<p>Being static means that when a browser requests your site, the server does not need to do any processing before serving the requested page. Contrast this to <a href="http://www.cnn.com">cnn.com</a> for instance. If a browser requests the home page for CNN, the server must look up in a database all the stories that are currently top news, it must get local news based on your location, if you are logged in it must know what your preferences are, etc. With a static site a user will get the same page every time they type the same web address<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup>, with no runtime processing.</p>

<p>This makes jekyll sites amazingly fast, especially when put together with the nginx server. It also has lower overhead for the server so a single machine can serve a lot more pages to multiple people when your site gets overwhelmed by becoming a top hit on reddit for instance.</p>

<p>There are drawbacks however. If you are creating a site where you need users to log in, or you want to setup a storefront and take payments, Jekyll is not for you<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup>. These examples are called <em>dynamic</em> sites: sites that change based on the user’s actions. Make sure you know what kind of site you need before stepping in.</p>

<h4 id="generator">generator</h4>

<p>Secondly, Jekyll pages are generated. This separates the <em>content</em> of your site from the <em>presentation</em>. Once you have styled your site, and are happy with the navigation from page to page, you can focus solely on the content of your posts. I write my posts in <a href="https://daringfireball.net/projects/markdown/">Markdown</a> which is a small, simple syntax that allows me to write in plain text, without any html embedded. I can write quickly, it is easily readable in a text editor, and formatting is both intuitive and aesthetic. For example, want to create a header, just underline it.</p>

<pre><code>Part 1: Jekyll
==============
</code></pre>

<p>Jekyll then takes your Markdown posts and converts them into html to generate each page of your site. If you take a look at the <a href="https://raw.githubusercontent.com/adamwalz/adamwalz.net/master/_posts/2014-04-26-blogging-with-jekyll-and-linode-part-1-jekyll.md">Markdown I used</a> to generate this post, and compare it to the the html output by using “show source” in your browser, you can see that the difference is enormous. After comparing those two options, which would you rather write in when getting your thoughts across on screen?</p>

<p>I should mention that you can also use <a href="http://textile.sitemonks.com">Textile</a> markup if you prefer it to Markdown, but I have never done so.</p>

<h2 id="using-jekyll">Using Jekyll</h2>

<h4 id="separating-your-site-logic">Separating your site logic</h4>

<p>Jekyll is a site generator, and this has a major benefit when creating your site layout. I want a header and footer on each page of my site, but I certainly don’t want to re-write them every time I create a new post. With jekyll I can write them once and put the header and footer in their own files. It is then just a matter of telling jekyll where I want to use each of those files, and when my site is built jekyll will take care of finding all the sources it needs and compiling them into a single html file for each page.</p>

<p>When creating your own site, keep in mind that these files, know as <em>includes</em>, can be as long or as short as you want them to be. My rule of thumb is that if I am going to copy and paste one bit of code into two pages, use an include. For example, this is my entire <em>header.html</em> include file.</p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;div</span> <span class="na">class=</span><span class="s">"container"</span><span class="nt">&gt;</span>
  Hi. I'm {{ site.author }}.
  <span class="nt">&lt;h3</span> <span class="na">class=</span><span class="s">"tagline"</span><span class="nt">&gt;</span>Here are some thoughts of mine.<span class="nt">&lt;/h3&gt;</span>
<span class="nt">&lt;/div&gt;</span>
<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<h4 id="file-structure">File Structure</h4>

<p>Jekyll relies on a well-defined directory/folder structure in order to generate your site. It has to know where your posts live, how to combine a markdown post with the html of your site layout, where includes files are stored, and which configurations you’ve set such as your site url.</p>

<p>The basic requirement is that any directory or file beginning with an underscore is used for the generation phase of the site, while any file without a leading underscore will be used as a final page/post after generating the site.</p>

<p>Posts will either go in the <em>_posts</em> or <em>_drafts</em> folder, depending on whether you want them published yet. HTML style and navigation will be put in the <em>_layouts</em> or <em>_includes</em> directories. The <em>_config.yml</em> file contains site-wide configurations defining the site’s url, author, link formatting, etc. When jekyll generates the site, the output will be created in the <em>_site</em> directory.</p>

<pre><code>.
├── _config.yml
├── _drafts
|   ├── begin-with-the-crazy-ideas.textile
|   └── on-simplicity-in-technology.markdown
├── _includes
|   ├── footer.html
|   └── header.html
├── _layouts
|   ├── default.html
|   └── post.html
├── _posts
|   ├── 2007-10-29-why-every-programmer-should-play-nethack.textile
|   └── 2009-04-26-barcamp-boston-4-roundup.textile
├── _data
|   └── members.yml
├── _site
└── index.html
</code></pre>

<h2 id="jekyll-command-line-tools">Jekyll command line tools</h2>

<p>Jekyll comes with two important tools for the creation of your site.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>jekyll build</code></pre></div></p>

<p><em>jekyll build</em> generates your site and places the generated HTML into the <em>_site</em> directory. When you are ready to deploy your site to the web, this is the directory you should copy onto your remote server<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup>.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>jekyll serve –watch</code></pre></div></p>

<p><em>jekyll serve</em> builds your site and allows you to preview what you are writing on your own computer, before it goes live to the web. After typing <em>jekyll serve</em>, simply open up a web browser and go to <code>http://localhost:4000</code></p>

<p><em>jekyll serve --watch</em> does the same thing as <em>serve</em>, but every time you change a file, the preview will be automatically regenerated to reflect this change. This can come in handy when you are actively working on a post, and want to see in real time how your markdown is being converted into HTML and how the final page will look.</p>

<h2 id="create-your-own">Create your own</h2>

<p>Ok, tutorial time. Everything we’ll be doing from this point on will be in a command line terminal and a simple text editor.</p>

<p>Since jekyll is written in the ruby programming language, we’ll use ruby-gems to install jekyll on your computer. Both ruby and ruby-gems are probably already available, but other than their availability, you don’t need to know much about them to get started.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>gem install jekyll</code></pre></div></p>

<p>Jekyll provides the scaffolding of your new website by default, and gives an easy way to create the necessary directory structure previously mentioned. Typing <em>jekyll new directory</em> will create all the folders needed to start a new site.</p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>jekyll new my-blog
New jekyll site installed <span class="k">in</span> /Users/adamwalz/my-blog.</code></pre></div></p>

<p>And thats it. You have just created an entire site. Go into that directory and preview it with <em>jekyll serve</em> to see how it looks. After running the <em>jekyll serve</em> command, open a browser and go to <code>http://localhost:4000</code></p>

<p><div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span><span class="nb">cd </span>my-blog
<span class="gp">$ </span>jekyll serve
Configuration file: /Users/adamwalz/my-blog/_config.yml
            Source: /Users/adamwalz/my-blog
       Destination: /Users/adamwalz/my-blog/_site
      Generating… <span class="k">done</span>.
    Server address: http://0.0.0.0:4000
  Server running… press ctrl-c to stop.</code></pre></div></p>

<p><img src="/assets/images/posts/blogging_with_jekyll/jekyll/jekyll_new-350x224-a6afe4.png" class="img-responsive center-block" alt ”Jekyll new” ></p>

<p>To start changing some of the default options, open <em>_config.yml</em> and edit the text after <code>name:</code> to change the title of the site. You can also start by editing these lines in <em>_layouts/default.html</em> to change the links in the footer of the site.</p>

<p><div class="highlight"><pre><code class="language-html" data-lang="html"><span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;p&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://github.com/yourusername"</span><span class="nt">&gt;</span>github.com/yourusername<span class="nt">&lt;/a&gt;&lt;br</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">"https://twitter.com/yourusername"</span><span class="nt">&gt;</span>twitter.com/yourusername<span class="nt">&lt;/a&gt;&lt;br</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/p&gt;</span>
<span class="nt">&lt;p&gt;</span></code></pre></div></p>

<p>Finally, the sample first blog post, written in Markdown is in <em>_posts/welcome-to-jekyll.markdown</em>. Opening that file in a text editor will give you a lot of insight into what markdown feels like, and how to add links and even a block of syntax-highlighted code. One thing in this file is unique to jekyll however, and not Markdown.</p>

<h2 id="highlight-yaml-"><div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="s">&lt;/h2&gt;</span>
<span class="s">&lt;p&gt;layout</span><span class="pi">:</span> <span class="s">post</span>
<span class="s">title</span><span class="pi">:</span>  <span class="s">“Welcome to Jekyll!”</span>
<span class="s">date</span><span class="pi">:</span>   <span class="s">2014-04-26 19:06:39</span>
<span class="s">categories</span><span class="pi">:</span> <span class="s">jekyll update</span>
<span class="s">—</span></code></pre></div></p>

<p>This is called <em>yaml frontmatter</em> and you will use it on almost every page you write. This is a list of configurations for the page. In the default frontmatter provided for this post there are variables for</p>

<ul>
  <li><strong>layout</strong> - Which file to use for the look and feel of the page, in this case _layout/post.html</li>
  <li><strong>title</strong> - The title of this blog post</li>
  <li><strong>date</strong> - The publishing date you want associated with the post, it should not change after you deploy your site</li>
  <li><strong>categories</strong> - This section will affect the final url when you deploy the generated site. In this case, since the categories are <em>jekyll</em> and <em>update</em>, the post will have the url <em>http://localhost:4000/jekyll/update/2014/04/26/welcome-to-jekyll.html</em></li>
</ul>

<h2 id="coming-up-next">Coming up next</h2>

<p>From here I recommend playing around with the pre-created files. Change one line at a time and then preview with <em>jekyll serve</em> and see what happens. You can create a new post by creating a file under <em>_posts</em> and follow the naming convention.</p>

<p>This isn’t always true in the world of open source tools, but the Jekyll website is fantastic and explains each concept in depth with examples. I used the website’s documentation extensively in creating this blog and highly recommend it. The documentation is at <a href="http://www.jekyllrb.com">jekyllrb.com</a>.</p>

<p>Coming up next in this series I will talk about git, a commonly used tool to keep track of each change your make to the code on your site, and be able to revert back to any change you have previously made if something goes wrong. Along with git I will be using the site <a href="http://www.github.com">github.com</a> to store the code for your site on the internet, so you can edit it from any computer you are at.</p>

<h4 id="notes">Notes</h4>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>As long as you haven’t updated your site in the meantime by re-building with jekyll. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>If you’re in the market to create your own dynamic site, I recommend using Ruby on Rails. A great tutorial on setting up a Rails site with a database and user accounts can be found in Michael Hartl’s <a href="http://ruby.railstutorial.org">Ruby on Rails Tutorial</a> <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>We’ll talk about deployment in much more detail in an upcoming post. <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
